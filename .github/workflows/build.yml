name: Build and Test

on:
  pull_request:
  push:
    branches:
      - "main"
  workflow_dispatch:

jobs:
  build-and-test:
    name: Build Image And Test
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
      security-events: write
      id-token: write
    env:
      _IMAGE_NAME: ghcr.io/bitwarden/sm-operator

    steps:
      - name: Check out repo
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Test operator
        id: test
        run: |
          sudo apt update && sudo apt install musl-tools -y
          make setup
          make test

      - name: Upload to codecov.io
        uses: codecov/codecov-action@1e68e06f1dbfde0e4cefc87efeba9e4643565303 # v5.1.2

      - name: Generate Docker image tag
        id: tag
        env:
          EVENT_TYPE: ${{ contains(github.event_name, 'pull_request') && 'pull_request' || '' }}
        run: |
          if [[ "$EVENT_TYPE" == "pull_request" ]]; then
            IMAGE_TAG="pr-${{ github.event.pull_request.number }}"
          else
            IMAGE_TAG=$(echo "${GITHUB_REF:11}" | sed "s#/#-#g")  # slash safe branch name
            if [[ "$IMAGE_TAG" == "main" ]]; then
              IMAGE_TAG=dev
            fi
          fi
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Generate image tag(s)
        id: image-tags
        env:
          IMAGE_TAG: ${{ steps.tag.outputs.image_tag }}
          SHA: ${{ github.sha }}
        run: |
          TAGS="${{ env._IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          echo "primary_tag=$TAGS" >> $GITHUB_OUTPUT
          if [[ "$IMAGE_TAG" == "dev" ]]; then
            SHORT_SHA="$(git rev-parse --short ${SHA})"
            TAGS="$TAGS,${{ env._IMAGE_NAME }}:${{ env.IMAGE_TAG }}-${SHORT_SHA}"
          fi
          echo "tags=$TAGS" >> $GITHUB_OUTPUT

      - name: Build Docker image
        id: build-docker
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          file: Dockerfile
          platforms: ${{ github.ref == 'refs/heads/main' && 'linux/amd64,linux/arm64' || 'linux/amd64' }} # Can only do single arch when not pushing to support scan and testing locally
          push: ${{ github.ref == 'refs/heads/main' }}
          load: ${{ github.ref != 'refs/heads/main' }}
          tags: ${{ steps.image-tags.outputs.tags }}

      - name: Install Cosign
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2

      - name: Sign image with Cosign
        if: ${{ github.ref == 'refs/heads/main' }}
        id: cosign
        env:
          DIGEST: ${{ steps.build-docker.outputs.digest }}
          TAGS: ${{ steps.image-tags.outputs.tags }}
        run: |
          IFS="," read -a tags <<< "${TAGS}"
          images=""
          for tag in "${tags[@]}"; do
            images+="${tag}@${DIGEST} "
          done
          cosign sign --yes ${images}
          echo "images=${images}" >> $GITHUB_OUTPUT

      - name: Verify the signed image with Cosign
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          cosign verify \
            --certificate-identity "${{ github.server_url }}/${{ github.workflow_ref }}" \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            ${{ steps.cosign.outputs.images }}

      - name: Scan Docker image
        id: container-scan
        uses: anchore/scan-action@df395807f4554463d4455b8047cf58e37b6acaae # v6.5.0
        with:
          image: ${{ steps.image-tags.outputs.primary_tag }}
          fail-build: false
          output-format: sarif

      - name: Upload Grype results to GitHub
        uses: github/codeql-action/upload-sarif@51f77329afa6477de8c49fc9c7046c15b9a4e79d # v3.29.5
        with:
          sarif_file: ${{ steps.container-scan.outputs.sarif }}
          sha: ${{ contains(github.event_name, 'pull_request') && github.event.pull_request.head.sha || github.sha }}
          ref: ${{ contains(github.event_name, 'pull_request') && format('refs/pull/{0}/head', github.event.pull_request.number) || github.ref }}

      - name: Create kind cluster
        uses: helm/kind-action@0025e74a8c7512023d06dc019c617aa3cf561fde # v1.10.0

      - name: Smoke test image
        id: smoke-test
        env:
          IMAGE: ${{ steps.image-tags.outputs.primary_tag }}
        run: |
          make deploy IMG=$IMAGE

          count=0
          while [[ $(kubectl get pods -n sm-operator-system -l control-plane=controller-manager -o jsonpath="{.items[*].status.containerStatuses[*].ready}") != "true" ]]; do
            sleep 1;
            count=$count+1
            if [[ count -ge 30 ]]; then
              break
            fi
          done

          #For review purposes
          echo "*****DEPLOYMENTS*****"
          kubectl get deployments -n sm-operator-system

          echo "*****PODS*****"
          pods=$(kubectl get pods -n sm-operator-system -l control-plane=controller-manager | grep 2/2)
          echo $pods

          if [[ -z "$pods" ]]; then
            echo "::error::No pods found."
            exit 1
          fi

          echo "*****OPERATOR OK*****"

      - name: Clean up
        run: |
          make undeploy
          kind delete cluster
